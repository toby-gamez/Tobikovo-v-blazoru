@page "/nazor"

<PageTitle>Vaše zpětná vazba</PageTitle>

@using System.Text.Json;
@using System.ComponentModel.DataAnnotations;
@using System.IO;
@rendermode InteractiveServer
<section>
    <h1 class="verybig">Vaše zpětná vazba</h1>
    <div style="text-align: left">
        <h2>Přidat</h2>
        <p>Napište nám svou zpětnou vazbu.</p>
        
        <EditForm EditContext="@_editContext" OnValidSubmit="@HandleSubmitAsync" FormName="OpinionForm">

        <DataAnnotationsValidator />
        <ValidationSummary />

            <div class="form-group" style="text-align: left; margin-top: 1rem;">
                <InputText @bind-Value="_newOpinion.Author" placeholder="Vaše jméno" class="opinion-input" />
            </div>

        <div class="form-group" style="text-align: left">
                <InputTextArea @bind-Value="_newOpinion.Text" placeholder="Zde napište svou zpětnou vazbu" />
            </div>

            <div style="text-align: center">
                <button type="submit" style="margin: 1rem">Přidat zpětnou vazbu</button>
            </div>
        </EditForm>

        
        
        <h2>Zpětná vazba ostatních</h2>
        <span style="color: #9c9c9c"><em>od nejnovějšího k nejstaršímu</em></span>
        <div class="opinions-container">
            @foreach (var opinion in _opinions.OrderByDescending(o => o.Date))
            {
                <div class="opinion-card">
                    <p class="opinion-text">@opinion.Text</p>
                    <div class="opinion-meta">
                        <span class="opinion-date">@opinion.Date.ToShortDateString()</span>
                        <span class="opinion-author">@opinion.Author</span>
                    </div>
                </div>
            }
        </div>
    </div>
    
</section>

@code {
    


    private List<OpinionModel> _opinions = new();
    private OpinionModel _newOpinion = new();
    private EditContext? _editContext;

    private const string FilePath = "wwwroot/opinions.json";

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_newOpinion);
        await LoadOpinionsAsync();
    }

    private async Task LoadOpinionsAsync()
    {
        if (File.Exists(FilePath))
        {
            var json = await File.ReadAllTextAsync(FilePath);
            _opinions = JsonSerializer.Deserialize<List<OpinionModel>>(json) ?? new List<OpinionModel>();
        }
    }

    private async Task SaveOpinionsAsync()
    {
        var json = JsonSerializer.Serialize(_opinions, new JsonSerializerOptions { WriteIndented = true });
        await File.WriteAllTextAsync(FilePath, json);
    }

    private async Task HandleSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_newOpinion.Text) || string.IsNullOrWhiteSpace(_newOpinion.Author))
        {
            _editContext?.NotifyValidationStateChanged();
            return;
        }

        var submittedOpinion = new OpinionModel
        {
            Text = _newOpinion.Text,
            Author = _newOpinion.Author,
            Date = DateTime.Now
        };

        _opinions.Add(submittedOpinion);
        await SaveOpinionsAsync();

        _newOpinion = new OpinionModel();
        _editContext = new EditContext(_newOpinion);
    }

    public class OpinionModel
    {
        [Required(ErrorMessage = "prosím zadejte vaši zpětnou vazbu")]
        public string Text { get; set; } = string.Empty;

        [Required(ErrorMessage = "prosím zadejte vaše jméno")]
        public string Author { get; set; } = string.Empty;

        public DateTime Date { get; set; }
    }
}



